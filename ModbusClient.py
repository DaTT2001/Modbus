import time
import requests
from datetime import datetime
from pymodbus.client import ModbusTcpClient
import threading

# C·∫•u h√¨nh chung
PORT = 502
ADDRESS = 0
COUNT = 8

# C·∫•u h√¨nh server v√† API endpoints
CONFIG = {
    "client1": {
        "server_ip": "192.168.2.10",
        "api_endpoints": [
            "http://192.168.10.87:8080/api/g1",
            "http://192.168.10.87:8081/api/v1/mPnKodsGI66fyM8fBDNV/telemetry"
        ]
    },
    "client2": {
        "server_ip": "192.168.2.11",
        "api_endpoints": [
            "http://192.168.10.87:8080/api/g2",
            "http://192.168.10.87:8081/api/v1/CZTxzFBMcdV8wnZ8Lqsi/telemetry"
        ]
    },
    "client3": {
        "server_ip": "192.168.2.12",
        "api_endpoints": [
            "http://192.168.10.87:8080/api/g3",
            "http://192.168.10.87:8081/api/v1/hwm2dsgx8lkin2vv8c1s/telemetry"
        ]
    }
}

def connect_modbus_client(server_ip, client_name):
    """K·∫øt n·ªëi ƒë·∫øn Modbus TCP Server"""
    while True:
        try:
            client = ModbusTcpClient(server_ip, port=PORT)
            if client.connect():
                print(f"‚úÖ [{client_name}] ƒê√£ k·∫øt n·ªëi Modbus th√†nh c√¥ng.")
                return client
            else:
                print(f"‚ùå [{client_name}] K·∫øt n·ªëi th·∫•t b·∫°i. Th·ª≠ l·∫°i sau 5 gi√¢y...")
        except Exception as e:
            print(f"‚ö† [{client_name}] L·ªói k·∫øt n·ªëi Modbus: {e}")
        time.sleep(5)

def convert_registers_to_temperatures(registers):
    """Chuy·ªÉn gi√° tr·ªã thanh ghi th√†nh nhi·ªát ƒë·ªô th·ª±c t·∫ø"""
    return [reg / 10 for reg in registers]

def send_to_api(temperatures, api_endpoints, client_name):
    """G·ª≠i d·ªØ li·ªáu nhi·ªát ƒë·ªô ƒë·∫øn c√°c API"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    payload = {
        "timestamp": timestamp,
        "sensor1_temperature": temperatures[0],
        "sensor2_temperature": temperatures[1],
        "sensor3_temperature": temperatures[2],
        "sensor4_temperature": temperatures[3],
        "sensor5_temperature": temperatures[4],
        "sensor6_temperature": temperatures[5],
        "sensor7_temperature": temperatures[6],
        "sensor8_temperature": temperatures[7],
    }

    for url in api_endpoints:
        try:
            response = requests.post(url, json=payload, timeout=5)
            if response.status_code in [200, 201]:
                print(f"‚úÖ [{client_name}] G·ª≠i th√†nh c√¥ng ƒë·∫øn {url}")
            else:
                print(f"‚ö† [{client_name}] API {url} tr·∫£ v·ªÅ m√£ {response.status_code}: {response.text}")
        except Exception as e:
            print(f"‚ùå [{client_name}] L·ªói khi g·ª≠i ƒë·∫øn {url}: {e}")

def main_loop(server_ip, api_endpoints, client_name):
    """V√≤ng l·∫∑p ch√≠nh cho m·ªói client"""
    client = connect_modbus_client(server_ip, client_name)

    try:
        while True:
            try:
                if not client.is_socket_open():
                    print(f"‚ö† [{client_name}] M·∫•t k·∫øt n·ªëi. ƒêang th·ª≠ l·∫°i...")
                    client.close()
                    client = connect_modbus_client(server_ip, client_name)

                response = client.read_input_registers(address=ADDRESS, count=COUNT)

                if response.isError():
                    print(f"‚ùå [{client_name}] L·ªói ƒë·ªçc thanh ghi: {response}")
                else:
                    registers = response.registers
                    temperatures = convert_registers_to_temperatures(registers)
                    print(f"‚úÖ [{client_name}] Nhi·ªát ƒë·ªô ƒë·ªçc ƒë∆∞·ª£c: {temperatures}")
                    # send_to_api(temperatures, api_endpoints, client_name)
                    if client_name == "client3":
                        # L·∫•y gi√° tr·ªã trung b√¨nh c·ªßa 7 c·∫£m bi·∫øn c√≤n l·∫°i (b·ªè qua index 1)
                        valid_values = [temp for i, temp in enumerate(temperatures) if i != 1]
                        average = sum(valid_values) / len(valid_values)
                        temperatures[1] = round(average, 1)  # L√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n
                        print(f"‚ö† [{client_name}] Thay th·∫ø sensor2_temperature b·∫±ng trung b√¨nh: {temperatures[1]}")

                    send_to_api(temperatures, api_endpoints, client_name)

            except Exception as e:
                print(f"‚ùå [{client_name}] L·ªói trong qu√° tr√¨nh ƒë·ªçc/g·ª≠i: {e}")
                client.close()
                client = connect_modbus_client(server_ip, client_name)

            time.sleep(10)

    except KeyboardInterrupt:
        print(f"üõë [{client_name}] D·ª´ng ch∆∞∆°ng tr√¨nh.")
    finally:
        client.close()

if __name__ == "__main__":
    # T·∫°o danh s√°ch c√°c lu·ªìng
    threads = []

    # T·∫°o lu·ªìng cho t·ª´ng client
    for client_name, config in CONFIG.items():
        thread = threading.Thread(
            target=main_loop,
            args=(config["server_ip"], config["api_endpoints"], client_name)
        )
        threads.append(thread)
        thread.start()

    # Ch·ªù t·∫•t c·∫£ c√°c lu·ªìng k·∫øt th√∫c (trong tr∆∞·ªùng h·ª£p n√†y l√† khi ng∆∞·ªùi d√πng nh·∫•n Ctrl+C)
    for thread in threads:
        thread.join()